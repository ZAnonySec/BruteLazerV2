//Made by Zer0sec and my main accaunt anony0977

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/ip.h>
#include <netinet/ip_icmp.h>
#include <unistd.h>
#include <sys/time.h>

#define PACKET_SIZE 64
#define MAX_PACKET_SIZE 1024

// Function to calculate the ICMP checksum
unsigned short checksum(unsigned short *ptr, int nbytes) {
    unsigned long sum = 0;
    while (nbytes > 1) {
        sum += *ptr++;
        nbytes -= 2;
    }
    if (nbytes == 1) {
        sum += *(unsigned char*)ptr;
    }
    sum = (sum >> 16) + (sum & 0xffff);
    sum += (sum >> 16);
    return (unsigned short)(~sum);
}

// Function to send an ICMP Echo Request packet and receive the response
double ping(const char* ip_addr) {
    struct sockaddr_in sin;
    sin.sin_family = AF_INET;
    sin.sin_addr.s_addr = inet_addr(ip_addr);

    // Create a raw socket
    int sd = socket(AF_INET, SOCK_RAW, IPPROTO_ICMP);
    if (sd < 0) {
        perror("socket() failed");
        exit(EXIT_FAILURE);
    }

    // Set the socket options to receive the ICMP Echo Reply packets
    struct timeval tv;
    tv.tv_sec = 1;
    tv.tv_usec = 0;
    if (setsockopt(sd, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv)) < 0) {
        perror("setsockopt() failed");
        exit(EXIT_FAILURE);
    }

    // Allocate the packet buffer
    char* packet = (char*)malloc(MAX_PACKET_SIZE);
    if (!packet) {
        perror("malloc() failed");
        exit(EXIT_FAILURE);
    }
    memset(packet, 0, MAX_PACKET_SIZE);

    // Fill in the ICMP Echo Request packet
    struct icmphdr* icmp = (struct icmphdr*)packet;
    icmp->type = ICMP_ECHO;
    icmp->code = 0;
    icmp->checksum = 0;
    icmp->un.echo.id = htons(getpid());
    icmp->un.echo.sequence = htons(1);
    char* data = packet + sizeof(struct icmphdr);
    memset(data, 'A', PACKET_SIZE - sizeof(struct icmphdr));
    icmp->checksum = checksum((unsigned short*)icmp, PACKET_SIZE);

    // Send the ICMP Echo Request packet
    struct timeval start, end;
    gettimeofday(&start, NULL);
    if (sendto(sd, packet, PACKET_SIZE, 0, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
        perror("sendto() failed");
        exit(EXIT_FAILURE);
    }

    // Receive the ICMP Echo Reply packet
    struct sockaddr_in from;
    socklen_t fromlen = sizeof(from);
    if (recvfrom(sd, packet, MAX_PACKET_SIZE, 0, (struct sockaddr*)&from, &fromlen) < 0) {
        perror("recvfrom() failed");
        exit(EXIT_FAILURE);
    }
    gettimeofday(&end, NULL);

    // Calculate the round-trip time in milliseconds
    double rtt = (end.tv_sec - start.tv_sec) * 1000.0 + (end.tv_usec - start.tv_usec) / 1000.0;
    // Clean up
    free(packet);
    close(sd);

    return 0;
}

// Function to calculate the TCP checksum
unsigned short csum(unsigned short *ptr, int nbytes) {
    register long sum;
    unsigned short oddbyte;
    register short answer;

    sum = 0;
    while (nbytes > 1) {
        sum += *ptr++;
        nbytes -= 2;
    }

    if (nbytes == 1) {
        oddbyte = 0;
        *((unsigned char *)&oddbyte) = *(unsigned char *)ptr;
        sum += oddbyte;
    }

    sum = (sum >> 16) + (sum & 0xffff);
    sum += (sum >> 16);
    answer = (short)~sum;

    return answer;
}
